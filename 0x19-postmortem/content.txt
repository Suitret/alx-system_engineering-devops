**Postmortem: Web Application Outage on E-commerce Platform**

### Issue Summary:
**Duration:** September 23, 2024, 13:00 UTC to 14:45 UTC (1 hour 45 minutes)

**Impact:** 
The e-commerce platform experienced a partial outage affecting approximately 60% of users. Users were unable to add items to their carts or complete transactions. Product listing and browsing pages were functional but slow to load.

**Root Cause:**  
A memory leak in the PHP session handler caused server memory to spike, exhausting resources and crashing the session service, leading to broken transaction flows for users.

---

### Timeline:
- **13:00 UTC** – Monitoring system detected a spike in server memory usage, triggering an alert.
- **13:05 UTC** – On-call engineer noticed that the checkout page was taking longer than usual to load.
- **13:10 UTC** – Customer support received multiple complaints about users being unable to complete transactions.
- **13:15 UTC** – The engineering team assumed the database was under high load and started investigating slow queries.
- **13:30 UTC** – A database optimization attempt was made, but the issue persisted.
- **13:45 UTC** – Escalated to senior engineers who identified high memory consumption on the session-handling server.
- **14:00 UTC** – Investigation revealed a memory leak in the PHP session handler. Restarting the session service temporarily resolved the issue.
- **14:30 UTC** – Memory leak patch was applied to the session handler.
- **14:45 UTC** – Full functionality restored, and monitoring confirmed stability.

---

### Root Cause and Resolution:
The root cause was a memory leak in the PHP session handler. The session handler failed to clear expired sessions efficiently, causing memory usage to steadily increase. As memory utilization grew, the server ran out of resources, leading to instability in session management, which broke key features such as adding items to carts and completing transactions.

The issue was resolved by applying a patch to the PHP session handler, ensuring proper garbage collection of expired sessions. Additionally, the session service was restarted to restore normal operations during the investigation phase, and server memory limits were adjusted to handle higher loads temporarily.

---

### Corrective and Preventative Measures:
**Improvements:**  
- Enhance monitoring to detect memory issues earlier.
- Introduce redundancy to session management to avoid single points of failure.
- Perform regular stress testing to identify similar issues in advance.

**Tasks:**  
- Implement a fix in the PHP session handler to prevent memory leaks.
- Add memory usage alerts specific to the session service.
- Introduce automatic session service restarts when memory thresholds are breached.
- Conduct a full review of the system's session handling process.
- Schedule weekly load testing to simulate heavy traffic and prevent recurrence.

